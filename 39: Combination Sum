class Solution {
    public void allCombinations(int[] arr, int ind, int target, List<List<Integer>> ans, List<Integer> cmb) {
        if (ind == arr.length) {
            return;
        }
        if (target == 0) {
            ans.add(new ArrayList<>(cmb));
            return;
        }
        
        if (target >= arr[ind]) {
            cmb.add(arr[ind]); 
            allCombinations(arr, ind, target - arr[ind], ans, cmb);
            cmb.remove(cmb.size() - 1);
        }
        allCombinations(arr, ind + 1, target, ans, cmb);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> cmb = new ArrayList<>();
        allCombinations(candidates, 0, target, ans, cmb);
        return ans;
    }
}
