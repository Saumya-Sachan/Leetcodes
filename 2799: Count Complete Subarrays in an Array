class Solution {
    public int countCompleteSubarrays(int[] nums) {
        Map<Integer, Integer> freqmap = new HashMap<>();
        for (int num: nums) {
            freqmap.put(num, freqmap.getOrDefault(num, 0) + 1);
        }
        Map<Integer, Integer> curr = new HashMap<>();
        int l = 0, r = 0, n = nums.length;
        int unique = freqmap.keySet().size();
        int count = 0;
        while (l < n) {
            if (r >= n || (curr.size() > unique && !sameKeys(curr, freqmap))) {
                removeFromMap(nums[l], curr);
                l++;
                if (sameKeys(curr, freqmap)) {
                    int index = getIndex(l, r, nums, unique);
                    count += r - index;
                }
            } else {
                curr.put(nums[r], curr.getOrDefault(nums[r], 0) + 1);
                if (sameKeys(curr, freqmap)) {
                    count++;
                }
                r++;
            }
        }
        return count;
    }
    private static void removeFromMap(int num, Map<Integer, Integer> curr) {
        if (curr.get(num) == 1) {
            curr.remove(num);
        } else {
            curr.put(num, curr.getOrDefault(num, 0) - 1);
        }
    }

    private int getIndex(int l, int r, int[] nums, int size) {
        Set<Integer> unique = new HashSet<>();
        for (int i = l; i < Math.min(r, nums.length); i++) {
            unique.add(nums[i]);
            if (unique.size() == size) {
                return i;
            }
        }
        return -1;
    }
    private boolean sameKeys(Map<Integer, Integer> curr, Map<Integer, Integer> freqmap) {
        return curr.keySet().size() == freqmap.keySet().size();
    }
}
